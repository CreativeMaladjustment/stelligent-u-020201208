AWSTemplateFormatVersion: "2010-09-09"

Resources:
  LambdaInvokePermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule.Arn

  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "${AWS::StackName}"
      RetentionInDays: 7

  LambLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 7
      
  BucketStack:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}"
      Tags:
        - Key: user
          Value: "jason.davis.labs"
        - Key: stelligent-u-lesson
          Value: "9"
        - Key: stelligent-u-lab
          Value: "9.2.2"
          
  TrailLogs:
    Type: AWS::CloudTrail::Trail
    Properties: 
      CloudWatchLogsLogGroupArn: !GetAtt LogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt RoleCloudWatch.Arn
      EventSelectors: 
        - DataResources:
            - Type: AWS::S3::Object
              Values: 
                - !Sub "arn:aws:s3:::${AWS::StackName}/"
          IncludeManagementEvents: No
          ReadWriteType: All
      IsLogging: True
      S3BucketName: "stelligent-u-922-jason.davis.labs-transfer"
      TrailName: !Sub "${AWS::StackName}"

  EventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "s3 put something"
      Name: "lab922-s3put"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            # - CopyObject
            - PutObject
            # - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Ref BucketStack
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "lambda-to-dynamoDB"

  RoleCloudWatch:
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudtrail.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "lab922-example-table"
      AttributeDefinitions:
      - AttributeName: "bucketName"
        AttributeType: "S"
      - AttributeName: "key"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "bucketName"
        KeyType: HASH
      - AttributeName: "key"
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - 
          PolicyName: "LambdaToDTable"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Sid: "LambdaToDTableAllowAll"
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
              - Sid: "allowlogstream"
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LambLogGroup}:log-stream:*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.lab922
      Timeout: 900
      Code:
        ZipFile: |
          import json
          from pprint import pprint
          import boto3
          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          table = dynamodb.Table('lab922-example-table')
          def lab922(event, context):
            bodyrecord = json.dumps(event['detail']['resources'][0]['ARN'])
            bucketnamerecord = json.dumps(event['detail']['resources'][-1]['ARN'])
            print("jello164")
            bodyrecord_str = bodyrecord.replace('arn:aws:s3:::', '')            
            bucketnamerecord_str = bucketnamerecord.replace('arn:aws:s3:::', '')            
            bodyrecord_str = bodyrecord.replace_str('"', '')            
            bucketnamerecord_str = bucketnamerecord_str.replace('"', '')            
            record = {
              'bucketName': bucketnamerecord_str,
              'key': bodyrecord_str
            }
            response=table.put_item(Item=record)
            return response

#event.detail.resources

# 'bucketName': int(event['bucketName']),
# 'key': event['key']