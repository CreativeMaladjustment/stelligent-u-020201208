AWSTemplateFormatVersion: 2010-09-09
Description: "lab 9.2.1 lambda w dynamoDB"

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "lab921-example-table"
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "N"
      - AttributeName: "name"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "id"
        KeyType: HASH
      - AttributeName: "name"
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - 
          PolicyName: "LambdaToDTable"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Sid: "LambdaToDTableAllowAll"
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.lab921
      Timeout: 900
      Code:
        ZipFile: |
          import json
          from pprint import pprint
          import boto3
          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          table = dynamodb.Table('lab921-example-table')
          def lab921(event, context):
            record = {
              'id': int(event['key1']),
              'name': event['key2']
            }
            response=table.put_item(Item=record)
            return response

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: hello aws api gw
      FailOnWarnings: true
      Name: jmd
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/"
  APIMethod: 
    Type: AWS::ApiGateway::Method
    Properties: 
      HttpMethod: "POST"
      RestApiId: !Ref "ApiGateway"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: 200
      Integration: 
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
  APIDeployment: 
    DependsOn: APIMethod
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref "ApiGateway"
      StageName: "jmd"

Outputs:
  TableName:
    Value: !Ref 'DynamoDBTable'
